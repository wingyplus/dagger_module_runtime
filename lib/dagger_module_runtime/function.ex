defmodule Dagger.ModuleRuntime.Function do
  alias Dagger.ModuleRuntime.Helper

  @doc """
  Define a Dagger function.
  """
  def define(dag, fun_def) do
    name = Keyword.fetch!(fun_def, :name)
    # args = fun_def[:args] || []
    return = Keyword.fetch!(fun_def, :return)

    # TODO: function doc by retrieving from `@doc`.
    # TODO: optional parameter
    dag
    |> Dagger.Client.function(Helper.camelize(name), fun_return(dag, return))
  end

  defp fun_return(dag, type) do
    return_type_def =
      dag
      |> Dagger.Client.type_def()

    case type do
      :string ->
        return_type_def
        |> Dagger.TypeDef.with_kind(Dagger.TypeDefKind.string_kind())

      module ->
        case Module.split(module) do
          # A module that generated by codegen.
          ["Dagger", name] ->
            return_type_def
            |> Dagger.TypeDef.with_object(name)

          [name] ->
            return_type_def
            |> Dagger.TypeDef.with_object(name)
        end
    end
  end
end
